import os
import re
import logging
from typing import Dict, List, Callable

from dotenv import load_dotenv
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, Update
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tubecomy")

# --- ENV ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_URL = os.getenv("PUBLIC_URL", "")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "sashablogerr")

TARIFF_PRICE = int(os.getenv("TARIFF_PRICE", "1499"))
TARIFF_DAYS = int(os.getenv("TARIFF_DAYS", "30"))
PAY_CARD_URL = os.getenv("PAY_CARD_URL", "https://yookassa.ru/")

WHAT_INSIDE_URL = os.getenv("WHAT_INSIDE_URL", "")

# –§–æ—Ç–æ (file_id –∏–∑ Telegram)
IMAGES = {
    "main": os.getenv("IMAGE_MAIN"),
    "email": os.getenv("IMAGE_EMAIL"),
    "join": os.getenv("IMAGE_JOIN"),
    "pay_card": os.getenv("IMAGE_PAY_CARD"),
    "pay_crypto": os.getenv("IMAGE_PAY_CRYPTO"),
    "inside": os.getenv("IMAGE_INSIDE"),
}

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")

# --- Bot/Dispatcher/FastAPI ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
app = FastAPI()
# --- E-MAIL: SQLite (—á—Ç–æ–±—ã –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∏–∫–æ–≥–¥–∞) ---
import sqlite3
from datetime import datetime

DB_PATH = "emails.db"

def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS emails (
                user_id INTEGER PRIMARY KEY,
                email TEXT NOT NULL,
                updated_at TEXT NOT NULL
            )
        """)

def get_email_db(user_id: int) -> str | None:
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("SELECT email FROM emails WHERE user_id=?", (user_id,))
        row = cur.fetchone()
        return row[0] if row else None

def save_email_db(user_id: int, email: str) -> None:
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            """
            INSERT INTO emails (user_id, email, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
              email=excluded.email,
              updated_at=excluded.updated_at
            """,
            (user_id, email, datetime.utcnow().isoformat())
        )

init_db()

# --- –ü–∞–º—è—Ç—å ---
screen_stack: Dict[int, List[str]] = {}
current_msgs: Dict[int, List[int]] = {}

# --- –£—Ç–∏–ª–∏—Ç—ã ---
async def clear_msgs(chat_id: int):
    ids = current_msgs.get(chat_id, [])
    for mid in ids:
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    current_msgs[chat_id] = []

def push_screen(uid: int, scr: str):
    screen_stack.setdefault(uid, []).append(scr)

def pop_screen(uid: int):
    if screen_stack.get(uid):
        screen_stack[uid].pop()

def peek_screen(uid: int) -> str | None:
    return screen_stack.get(uid, [])[-1] if screen_stack.get(uid) else None

async def send_block(chat_id: int, text: str, kb: InlineKeyboardMarkup, img_key: str):
    msg_ids = []
    if IMAGES.get(img_key):
        try:
            photo = IMAGES[img_key]
            m = await bot.send_photo(chat_id, photo=photo, caption=text, reply_markup=kb)
            msg_ids.append(m.message_id)
        except Exception:
            m = await bot.send_message(chat_id, text, reply_markup=kb)
            msg_ids.append(m.message_id)
    else:
        m = await bot.send_message(chat_id, text, reply_markup=kb)
        msg_ids.append(m.message_id)
    current_msgs.setdefault(chat_id, []).extend(msg_ids)

# --- –ö–Ω–æ–ø–∫–∏ ---
def kb_main():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨", callback_data="join")],
        [
            InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="inside"),
            InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url=f"https://t.me/{SUPPORT_USERNAME}")
        ]
    ])

def kb_join():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ü–õ–ê–¢–ê –ö–ê–†–¢–û–ô –†–§", callback_data="pay_card")],
        [InlineKeyboardButton(text="–û–ü–õ–ê–¢–ê –ö–†–ò–ü–¢–û–ô", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kb_pay_card():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"1 –º–µ—Å—è—Ü ‚Äî {TARIFF_PRICE}‚ÇΩ", url=PAY_CARD_URL)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kb_pay_crypto():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–í–Ø–ó–ê–¢–¨–°–Ø", url=f"https://t.me/{SUPPORT_USERNAME}")],
        [InlineKeyboardButton(text="–û–ü–õ–ê–¢–ò–¢–¨ –ö–ê–†–¢–û–ô –†–§", callback_data="pay_card")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kb_inside():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–°–¢–£–ü–ò–¢–¨", callback_data="join")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", url=f"https://t.me/{SUPPORT_USERNAME}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kb_email():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# --- –≠–∫—Ä–∞–Ω—ã ---
async def render_main(chat_id: int):
    await clear_msgs(chat_id)
    text = "<b>TubeComy</b>\n\n–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube.\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–ø—ã—Ç –∏ —Å—Ö–µ–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞."
    await send_block(chat_id, text, kb_main(), "main")

async def render_email(chat_id: int):
    await clear_msgs(chat_id)
    text = "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail (–Ω–∞–ø—Ä–∏–º–µ—Ä, ivan@example.com). –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Å–≤—è–∑–∏ –∏ —á–µ–∫–æ–≤."
    await send_block(chat_id, text, kb_email(), "email")

async def render_join(chat_id: int):
    await clear_msgs(chat_id)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    await send_block(chat_id, text, kb_join(), "join")

async def render_pay_card(chat_id: int):
    await clear_msgs(chat_id)
    text = f"–î–æ—Å—Ç—É–ø: <b>1 –º–µ—Å—è—Ü</b> ‚Äî {TARIFF_PRICE}‚ÇΩ\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    await send_block(chat_id, text, kb_pay_card(), "pay_card")

async def render_pay_crypto(chat_id: int):
    await clear_msgs(chat_id)
    text = "ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π.\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º —à–∞–≥–∏.\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±."
    await send_block(chat_id, text, kb_pay_crypto(), "pay_crypto")

async def render_inside(chat_id: int):
    # –æ—á–∏—â–∞–µ–º –≤—Å—ë, —á—Ç–æ –±—ã–ª–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–∞–Ω—å—à–µ
    await clear_msgs(chat_id)

    # --- ¬´—á—Ç–æ –≤–Ω—É—Ç—Ä–∏¬ª ‚Äî –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç, –≤—à–∏—Ç—ã–π –≤ –∫–æ–¥ ---
INSIDE_STATIC_TEXT = (
    "<b>–ß–¢–û –í–ê–° –ñ–î–Å–¢ –° –ù–ê–ú–ò?</b>\n\n"
    "<u>–£–∂–µ –≤–Ω—É—Ç—Ä–∏:</u>\n"
    "üîç –ö–ª–∞—Å—Å–Ω–∞—è –Ω–∏—à–∞ —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π ‚Äî –æ –Ω–µ–π –º–∞–ª–æ –∫—Ç–æ –∑–Ω–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
    "üìñ –ü–æ–ª–Ω—ã–π –≥–∞–π–¥ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –Ω–∏—à–∏, –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã, —Ä–∞–∑–±–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n"
    "üöÄ –ú–µ—Ç–æ–¥—ã –±—É—Å—Ç–∞ –≤–∏–¥–µ–æ ‚Äî –ø–æ–º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–∏ –≤–∏–¥–µ–æ –≤ –∫–æ—Å–º–æ—Å\n"
    "üß≠ –ú–µ—Ç–æ–¥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –Ω–∏—à ‚Äî —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞—Ç—å, –∫—É–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ\n"
    "üìû –û–±—â–∏–π —Å–æ–∑–≤–æ–Ω 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞–∑–±–æ—Ä—ã, –∏–Ω—Å–∞–π–¥—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, —Å—Ç–∞–±–∏–ª—å–Ω–æ\n\n"
    "<u>–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è:</u>\n"
    "üõ° –†–∞–∑–±–æ—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –∏ –∫–∞–∫ –∏—Ö –æ–±—Ö–æ–¥–∏—Ç—å\n"
    "üéØ –ù–æ–≤–∞—è –Ω–∏—à–∞ ‚Äî —Ç–∞–∫–∂–µ —Å –ø–æ–ª–Ω—ã–º –≥–∞–π–¥–æ–º\n"
    "üé∂ –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–∫–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å–µ–±—è ‚Äî –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤ –∏ —Å –±–æ–ª—å—à–µ–π –≤—ã–≥–æ–¥–æ–π (+ –±–æ–Ω—É—Å)\n"
    "‚Ä¶"
)
async def render_inside(chat_id: int) -> None:
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
    await clear_msgs(chat_id)

    # –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏
    msg = await bot.send_message(
        chat_id=chat_id,
        text=INSIDE_STATIC_TEXT,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=kb_inside(),  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –í–°–¢–£–ü–ò–¢–¨ / –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å / –ù–∞–∑–∞–¥
    )

    # –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ¬´–ù–∞–∑–∞–¥¬ª
    current_msgs[chat_id] = [msg.message_id]
    push_screen(chat_id, "inside")

renderers: Dict[str, Callable[[int], None]] = {
    "main": render_main,
    "email": render_email,
    "join": render_join,
    "pay_card": render_pay_card,
    "pay_crypto": render_pay_crypto,
    "inside": render_inside,
}

async def show_screen(uid: int, screen: str):
    push_screen(uid, screen)
    fn = renderers.get(screen)
    if fn:
        await fn(uid)

# --- Handlers ---
@dp.message(F.text == "/start")
async def cmd_start(m: Message):
    screen_stack[m.from_user.id] = []
    current_msgs[m.chat.id] = []
    await show_screen(m.chat.id, "main")
    
@dp.callback_query(F.data == "join")
async def cb_join(cb: CallbackQuery):
    # —á–∏—Ç–∞–µ–º e-mail –∏–∑ –ë–î (–∞ –Ω–µ –∏–∑ user_emails)
    email = get_email_db(cb.from_user.id)
    if email:
        await show_screen(cb.from_user.id, "join")   # —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    else:
        await show_screen(cb.from_user.id, "email")  # —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏–º e-mail (–æ–¥–∏–Ω —Ä–∞–∑)
    await cb.answer()

EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$", re.I)

@dp.message()
async def on_text(m: Message):
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ e-mail —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω —ç–∫—Ä–∞–Ω "email"
    if peek_screen(m.from_user.id) == "email":
        email = (m.text or "").strip()

        if not EMAIL_RE.match(email):
            await bot.send_message(m.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–Ω–∞–≤—Å–µ–≥–¥–∞)
        save_email_db(m.from_user.id, email)
        await bot.send_message(m.chat.id, "‚úÖ E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

        # —É–±–∏—Ä–∞–µ–º –∏–∑ —Å—Ç–µ–∫–∞ —ç–∫—Ä–∞–Ω "email", —á—Ç–æ–±—ã ¬´–ù–∞–∑–∞–¥¬ª –ø–æ—Ç–æ–º –Ω–µ –≤–µ–ª –∫ –Ω–µ–º—É
        pop_screen(m.from_user.id)

        # –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã
        await show_screen(m.chat.id, "join")
        
@dp.callback_query(F.data == "pay_card")
async def cb_card(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "pay_card")
    await cb.answer()

@dp.callback_query(F.data == "pay_crypto")
async def cb_crypto(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "pay_crypto")
    await cb.answer()

@dp.callback_query(F.data == "inside")
async def cb_inside(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "inside")
    await cb.answer()

@dp.callback_query(F.data == "back")
async def cb_back(cb: CallbackQuery):
    uid = cb.from_user.id

    # —Å–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
    pop_screen(uid)

    # –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤ —Å—Ç–µ–∫–µ "email" ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if peek_screen(uid) == "email":
        pop_screen(uid)

    prev = peek_screen(uid) or "main"
    await show_screen(uid, prev)
    await cb.answer()

# --- FastAPI webhook ---
@app.post("/webhooks/telegram")
async def tg_webhook(req: Request):
    data = await req.json()
    update = Update.model_validate(data)
    await dp.feed_webhook_update(bot, update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"ok": True}
