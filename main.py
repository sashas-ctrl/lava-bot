import os
import re
import sqlite3
import logging
from datetime import datetime
from urllib.parse import urlparse

from fastapi import FastAPI, Request
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)

# =====================  ENV & LOGS  =====================

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_URL = os.getenv("PUBLIC_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "sashablogerr")

TARIFF_PRICE = int(os.getenv("TARIFF_PRICE", "1499"))
TARIFF_DAYS = int(os.getenv("TARIFF_DAYS", "30"))

# –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π (–ÆKassa):
PAY_CARD_URL = os.getenv("PAY_CARD_URL", "https://yookassa.ru/some/your/link")

# –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç ¬´–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?¬ª ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä https://t.me/greycomunity/5
WHAT_INSIDE_URL = os.getenv("WHAT_INSIDE_URL", "https://t.me/greycomunity/5")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)
log = logging.getLogger("tubecomy-bot")

# =====================  BOT/DP/APP  =====================

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
app = FastAPI()

# =====================  DB (email)  =====================

DB_PATH = "emails.db"

def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS emails (
                user_id INTEGER PRIMARY KEY,
                email   TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
            """
        )

def get_email(user_id: int) -> str | None:
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("SELECT email FROM emails WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        return row[0] if row else None

def save_email(user_id: int, email: str) -> None:
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            """
            INSERT INTO emails (user_id, email, created_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET email=excluded.email, created_at=excluded.created_at
            """,
            (user_id, email, datetime.utcnow().isoformat()),
        )

init_db()

# =====================  STATE (—ç–∫—Ä–∞–Ω—ã/—Å—Ç–µ–∫)  =====================

# —Å—Ç–µ–∫–∏ —ç–∫—Ä–∞–Ω–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
screen_stack: dict[int, list[str]] = {}
current_msgs: dict[int, list[int]] = {}

def push_screen(user_id: int, screen: str):
    screen_stack.setdefault(user_id, [])
    screen_stack[user_id].append(screen)

def pop_screen(user_id: int) -> str | None:
    if user_id in screen_stack and screen_stack[user_id]:
        return screen_stack[user_id].pop()
    return None

def peek_screen(user_id: int) -> str | None:
    if user_id in screen_stack and screen_stack[user_id]:
        return screen_stack[user_id][-1]
    return None

def reset_stack(user_id: int):
    screen_stack[user_id] = []

async def clean_messages(chat_id: int):
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    ids = current_msgs.get(chat_id, [])
    for mid in ids:
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    current_msgs[chat_id] = []

async def send_block(chat_id: int, text: str, kb: InlineKeyboardMarkup | None = None):
    msg = await bot.send_message(chat_id, text, reply_markup=kb)
    current_msgs.setdefault(chat_id, [])
    current_msgs[chat_id].append(msg.message_id)

# =====================  –ö–ù–û–ü–ö–ò  =====================

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", callback_data="join")],
            [
                InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="inside"),
                InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url=f"https://t.me/{SUPPORT_USERNAME}")
            ],
        ]
    )

def kb_join() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§", callback_data="pay_card")],
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π", callback_data="pay_crypto")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    )

def kb_pay_card() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"1 –º–µ—Å—è—Ü ‚Äî {TARIFF_PRICE} ‚ÇΩ", url=PAY_CARD_URL)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    )

def kb_pay_crypto() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{SUPPORT_USERNAME}")],
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§", callback_data="pay_card")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    )

def kb_inside() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", callback_data="join")],
            [
                InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –¥–æ–ø. –≤–æ–ø—Ä–æ—Å—ã", url=f"https://t.me/{SUPPORT_USERNAME}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            ],
        ]
    )

def kb_email() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back")]
        ]
    )

# =====================  –†–ï–ù–î–ï–†–´ –≠–ö–†–ê–ù–û–í  =====================

async def render_main(chat_id: int):
    await clean_messages(chat_id)
    text = (
        "<b>TubeComy</b>\n"
        "–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö.\n"
        "–í–Ω—É—Ç—Ä–∏ ‚Äî –º–µ—Ç–æ–¥–∏–∫–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–±–æ—Ä—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–æ—Å—Ç–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )
    await send_block(chat_id, text, kb_main())
    push_screen(chat_id, "main")

async def render_join(chat_id: int):
    await clean_messages(chat_id)
    text = (
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\n"
        "‚Ä¢ <b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§</b> ‚Äî –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ —á–µ—Ä–µ–∑ –ÆKassa\n"
        "‚Ä¢ <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π</b> ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –º—ã –ø–æ–º–æ–∂–µ–º\n"
    )
    await send_block(chat_id, text, kb_join())
    push_screen(chat_id, "join")

async def render_pay_card(chat_id: int):
    await clean_messages(chat_id)
    text = (
        "<b>–¢–∞—Ä–∏—Ñ—ã</b>\n\n"
        f"‚Ä¢ <b>1 –º–µ—Å—è—Ü</b> ‚Äî <b>{TARIFF_PRICE} ‚ÇΩ</b>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
    )
    await send_block(chat_id, text, kb_pay_card())
    push_screen(chat_id, "pay_card")

async def render_pay_crypto(chat_id: int):
    await clean_messages(chat_id)
    text = (
        "<b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –∏ —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ.\n"
        "–õ–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π –†–§."
    )
    await send_block(chat_id, text, kb_pay_crypto())
    push_screen(chat_id, "pay_crypto")

def parse_telegram_post_link(link: str) -> tuple[str, int] | None:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç https://t.me/username/123 -> ('@username', 123)
    """
    try:
        u = urlparse(link)
        if u.netloc not in ("t.me", "telegram.me"):
            return None
        parts = u.path.strip("/").split("/")
        if len(parts) != 2:
            return None
        username, mid = parts
        msg_id = int(mid)
        return f"@{username}", msg_id
    except Exception:
        return None

async def render_inside(chat_id: int):
    await clean_messages(chat_id)

    # –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞
    ok = False
    parsed = parse_telegram_post_link(WHAT_INSIDE_URL)
    if parsed:
        from_chat, msg_id = parsed
        try:
            await bot.copy_message(
                chat_id=chat_id,
                from_chat_id=from_chat,
                message_id=msg_id,
                reply_markup=kb_inside(),
            )
            # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_msgs.setdefault(chat_id, []).append(
                current_msgs[chat_id][-1] + 1 if current_msgs[chat_id] else 0
            )
            ok = True
        except Exception as e:
            log.warning("copy_message failed: %s", e)

    if not ok:
        # –∑–∞–ø–∞—Å–Ω–æ–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        text = (
            "<b>–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ TubeComy?</b>\n\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–æ—Å—Ç—É YouTube-–∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —É–ø–∞–∫–æ–≤–∫–∞ –∏ –ø—Ä–æ–¥–∞–∫—à–Ω\n"
            "‚Ä¢ –ú–µ—Ç–æ–¥–∏–∫–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ö–µ–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚Ä¢ –†–∞–∑–±–æ—Ä—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: <b>{TARIFF_PRICE} ‚ÇΩ</b> / <b>{TARIFF_DAYS}</b> –¥–Ω–µ–π"
        )
        await send_block(chat_id, text, kb_inside())

    push_screen(chat_id, "inside")

EMAIL_PROMPT = (
    "<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
    "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
    "–ü—Ä–∏–º–µ—Ä: <code>name@gmail.com</code>"
)

async def render_email(chat_id: int):
    await clean_messages(chat_id)
    await send_block(chat_id, EMAIL_PROMPT, kb_email())
    push_screen(chat_id, "email")

# =====================  –•–ï–ù–î–õ–ï–†–´  =====================

@dp.message(CommandStart())
async def on_start(m: Message):
    reset_stack(m.from_user.id)
    current_msgs[m.chat.id] = []
    await render_main(m.chat.id)

@dp.callback_query(F.data == "join")
async def cb_join(cb: CallbackQuery):
    # –µ—Å–ª–∏ e-mail –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –ø—Ä–æ—Å–∏–º —Å–Ω–∞—á–∞–ª–∞ e-mail
    email = get_email(cb.from_user.id)
    if email:
        await render_join(cb.from_user.id)
    else:
        await render_email(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "pay_card")
async def cb_pay_card(cb: CallbackQuery):
    await render_pay_card(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "pay_crypto")
async def cb_pay_crypto(cb: CallbackQuery):
    await render_pay_crypto(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "inside")
async def cb_inside(cb: CallbackQuery):
    await render_inside(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "back")
async def cb_back(cb: CallbackQuery):
    # —Å–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
    pop_screen(cb.from_user.id)
    prev = peek_screen(cb.from_user.id)
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π
    if not prev:
        await render_main(cb.from_user.id)
        await cb.answer()
        return

    # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
    if prev == "main":
        await render_main(cb.from_user.id)
    elif prev == "join":
        await render_join(cb.from_user.id)
    elif prev == "pay_card":
        await render_pay_card(cb.from_user.id)
    elif prev == "pay_crypto":
        await render_pay_crypto(cb.from_user.id)
    elif prev == "inside":
        await render_inside(cb.from_user.id)
    elif prev == "email":
        await render_email(cb.from_user.id)
    else:
        await render_main(cb.from_user.id)
    await cb.answer()

# –ü—Ä–∏—ë–º e-mail
EMAIL_RE = re.compile(r"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$", re.I)

@dp.message(F.text)
async def on_text(m: Message):
    # –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ email ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º e-mail
    if peek_screen(m.from_user.id) == "email":
        text = (m.text or "").strip()
        if EMAIL_RE.match(text):
            save_email(m.from_user.id, text)
            await bot.send_message(m.chat.id, "‚úÖ E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            # –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã
            pop_screen(m.from_user.id)  # –∑–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω email
            await render_join(m.from_user.id)
        else:
            await bot.send_message(m.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return

# =====================  WEBHOOK (Render)  =====================

@app.post("/webhooks/telegram")
async def telegram_webhook(req: Request):
    body = await req.body()
    await dp.feed_webhook_update(bot, body.decode())
    return {"ok": True}

@app.get("/")
async def index():
    return {"ok": True}

# –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", "8000")))
