import os
import re
import logging
from typing import Dict, List, Callable

from dotenv import load_dotenv
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, Update
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger("tubecomy")

# --- ENV ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_URL = os.getenv("PUBLIC_URL", "")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "sashablogerr")

TARIFF_PRICE = int(os.getenv("TARIFF_PRICE", "1499"))
TARIFF_DAYS = int(os.getenv("TARIFF_DAYS", "30"))
PAY_CARD_URL = os.getenv("PAY_CARD_URL", "https://yookassa.ru/")

WHAT_INSIDE_URL = os.getenv("WHAT_INSIDE_URL", "")

# –§–æ—Ç–æ (file_id –∏–∑ Telegram)
IMAGES = {
    "main": os.getenv("IMAGE_MAIN"),
    "email": os.getenv("IMAGE_EMAIL"),
    "join": os.getenv("IMAGE_JOIN"),
    "pay_card": os.getenv("IMAGE_PAY_CARD"),
    "pay_crypto": os.getenv("IMAGE_PAY_CRYPTO"),
    "inside": os.getenv("IMAGE_INSIDE"),
}

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")

# --- Bot/Dispatcher/FastAPI ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
app = FastAPI()

# --- –ü–∞–º—è—Ç—å ---
screen_stack: Dict[int, List[str]] = {}
current_msgs: Dict[int, List[int]] = {}
user_emails: Dict[int, str] = {}

# --- –£—Ç–∏–ª–∏—Ç—ã ---
async def clear_msgs(chat_id: int):
    ids = current_msgs.get(chat_id, [])
    for mid in ids:
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    current_msgs[chat_id] = []

def push_screen(uid: int, scr: str):
    screen_stack.setdefault(uid, []).append(scr)

def pop_screen(uid: int):
    if screen_stack.get(uid):
        screen_stack[uid].pop()

def peek_screen(uid: int) -> str | None:
    return screen_stack.get(uid, [])[-1] if screen_stack.get(uid) else None

async def send_block(chat_id: int, text: str, kb: InlineKeyboardMarkup, img_key: str):
    msg_ids = []
    if IMAGES.get(img_key):
        try:
            photo = IMAGES[img_key]
            m = await bot.send_photo(chat_id, photo=photo, caption=text, reply_markup=kb)
            msg_ids.append(m.message_id)
        except Exception:
            m = await bot.send_message(chat_id, text, reply_markup=kb)
            msg_ids.append(m.message_id)
    else:
        m = await bot.send_message(chat_id, text, reply_markup=kb)
        msg_ids.append(m.message_id)
    current_msgs.setdefault(chat_id, []).extend(msg_ids)

# --- –ö–Ω–æ–ø–∫–∏ ---
def kb_main():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {TARIFF_PRICE}‚ÇΩ/{TARIFF_DAYS}–¥–Ω", callback_data="join")],
        [
            InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="inside"),
            InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url=f"https://t.me/{SUPPORT_USERNAME}")
        ]
    ])

def kb_join():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§", callback_data="pay_card")],
        [InlineKeyboardButton(text="ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kb_pay_card():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"1 –º–µ—Å—è—Ü ‚Äî {TARIFF_PRICE}‚ÇΩ", url=PAY_CARD_URL)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kb_pay_crypto():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{SUPPORT_USERNAME}")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§", callback_data="pay_card")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kb_inside():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–°–¢–£–ü–ò–¢–¨", callback_data="join")],
        [InlineKeyboardButton(text="–î–æ–ø. –≤–æ–ø—Ä–æ—Å—ã", url=f"https://t.me/{SUPPORT_USERNAME}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def kb_email():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# --- –≠–∫—Ä–∞–Ω—ã ---
async def render_main(chat_id: int):
    await clear_msgs(chat_id)
    text = "<b>TubeComy</b>\n\n–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube.\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–ø—ã—Ç –∏ —Å—Ö–µ–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞."
    await send_block(chat_id, text, kb_main(), "main")

async def render_email(chat_id: int):
    await clear_msgs(chat_id)
    text = "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail (–Ω–∞–ø—Ä–∏–º–µ—Ä, ivan@example.com). –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Å–≤—è–∑–∏ –∏ —á–µ–∫–æ–≤."
    await send_block(chat_id, text, kb_email(), "email")

async def render_join(chat_id: int):
    await clear_msgs(chat_id)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    await send_block(chat_id, text, kb_join(), "join")

async def render_pay_card(chat_id: int):
    await clear_msgs(chat_id)
    text = f"–î–æ—Å—Ç—É–ø: <b>1 –º–µ—Å—è—Ü</b> ‚Äî {TARIFF_PRICE}‚ÇΩ\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    await send_block(chat_id, text, kb_pay_card(), "pay_card")

async def render_pay_crypto(chat_id: int):
    await clear_msgs(chat_id)
    text = "ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π.\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º —à–∞–≥–∏.\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±."
    await send_block(chat_id, text, kb_pay_crypto(), "pay_crypto")

async def render_inside(chat_id: int):
    await clear_msgs(chat_id)
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç
    if WHAT_INSIDE_URL:
        await bot.send_message(chat_id, WHAT_INSIDE_URL)
    text = "–ê –≤–æ—Ç –∏ –¥–µ—Ç–∞–ª–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üëá"
    await send_block(chat_id, text, kb_inside(), "inside")

renderers: Dict[str, Callable[[int], None]] = {
    "main": render_main,
    "email": render_email,
    "join": render_join,
    "pay_card": render_pay_card,
    "pay_crypto": render_pay_crypto,
    "inside": render_inside,
}

async def show_screen(uid: int, screen: str):
    push_screen(uid, screen)
    fn = renderers.get(screen)
    if fn:
        await fn(uid)

# --- Handlers ---
@dp.message(F.text == "/start")
async def cmd_start(m: Message):
    screen_stack[m.from_user.id] = []
    current_msgs[m.chat.id] = []
    await show_screen(m.chat.id, "main")

@dp.callback_query(F.data == "join")
async def cb_join(cb: CallbackQuery):
    if user_emails.get(cb.from_user.id):
        await show_screen(cb.from_user.id, "join")
    else:
        await show_screen(cb.from_user.id, "email")
    await cb.answer()

EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$", re.I)

@dp.message()
async def on_text(m: Message):
    if peek_screen(m.from_user.id) == "email":
        email = (m.text or "").strip()
        if EMAIL_RE.match(email):
            user_emails[m.from_user.id] = email
            await bot.send_message(m.chat.id, "‚úÖ E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            await show_screen(m.chat.id, "join")
        else:
            await bot.send_message(m.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.callback_query(F.data == "pay_card")
async def cb_card(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "pay_card")
    await cb.answer()

@dp.callback_query(F.data == "pay_crypto")
async def cb_crypto(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "pay_crypto")
    await cb.answer()

@dp.callback_query(F.data == "inside")
async def cb_inside(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "inside")
    await cb.answer()

@dp.callback_query(F.data == "back")
async def cb_back(cb: CallbackQuery):
    pop_screen(cb.from_user.id)
    prev = peek_screen(cb.from_user.id) or "main"
    await show_screen(cb.from_user.id, prev)
    await cb.answer()

# --- FastAPI webhook ---
@app.post("/webhooks/telegram")
async def tg_webhook(req: Request):
    data = await req.json()
    update = Update.model_validate(data)
    await dp.feed_webhook_update(bot, update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"ok": True}
