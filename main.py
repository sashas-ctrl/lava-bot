import os
import re
import logging
from typing import Dict, List, Callable, Optional

from dotenv import load_dotenv
from fastapi import FastAPI, Request, Response
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Update, Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup
)

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("tubecomy-bot")

# ============ –ö–û–ù–§–ò–ì ============
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_URL = os.getenv("PUBLIC_URL")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "sashablogerr")
PRICE_RUB = int(os.getenv("PRICE_RUB", "1499"))
PERIOD_DAYS = int(os.getenv("PERIOD_DAYS", "30"))
CARD_PAY_URL = os.getenv("CARD_PAY_URL", "")  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è

if not BOT_TOKEN or not PUBLIC_URL:
    raise RuntimeError("ENV BOT_TOKEN –∏ PUBLIC_URL –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

# ¬´–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?¬ª ‚Äî —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª
WHAT_INSIDE_TEXT = (
    "<b>–ß–¢–û –í–ê–° –ñ–î–Å–¢ –° –ù–ê–ú–ò?</b>\n\n"
    "<b>–£–∂–µ –≤–Ω—É—Ç—Ä–∏:</b>\n"
    "üîç –ö–ª–∞—Å—Å–Ω–∞—è –Ω–∏—à–∞ —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π ‚Äî –æ –Ω–µ–π –º–∞–ª–æ –∫—Ç–æ –∑–Ω–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
    "üìñ –ü–æ–ª–Ω—ã–π –≥–∞–π–¥ ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –Ω–∏—à–∏, –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã, —Ä–∞–∑–±–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n"
    "üöÄ –ú–µ—Ç–æ–¥—ã –±—É—Å—Ç–∞ –≤–∏–¥–µ–æ ‚Äî –ø–æ–º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–∏ –≤–∏–¥–µ–æ –≤ –∫–æ—Å–º–æ—Å\n"
    "üß≠ –ú–µ—Ç–æ–¥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –Ω–∏—à ‚Äî —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞—Ç—å, –∫—É–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ\n"
    "üìû –û–±—â–∏–π —Å–æ–∑–≤–æ–Ω 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞–∑–±–æ—Ä—ã, –∏–Ω—Å–∞–π–¥—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, —Å—Ç–∞–±–∏–ª—å–Ω–æ\n\n"
    "<b>–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è:</b>\n"
    "üõ° –†–∞–∑–±–æ—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –∏ –∫–∞–∫ –∏—Ö –æ–±—Ö–æ–¥–∏—Ç—å\n"
    "üéØ –ù–æ–≤–∞—è –Ω–∏—à–∞ ‚Äî —Ç–∞–∫–∂–µ —Å –ø–æ–ª–Ω—ã–º –≥–∞–π–¥–æ–º\n"
    "üé∂ –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–∫–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å–µ–±—è ‚Äî –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤ –∏ —Å –±–æ–ª—å—à–µ–π –≤—ã–≥–æ–¥–æ–π (+–±–æ–Ω—É—Å)\n"
    "‚Ä¶"
)

# ============ BOT / DP / APP ============
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ============ –ü–ê–ú–Ø–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ============
user_emails: Dict[int, str] = {}              # id -> email
current_msgs: Dict[int, List[int]] = {}        # id -> —Å–ø–∏—Å–æ–∫ id —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
screen_stack: Dict[int, List[str]] = {}        # id -> —Å—Ç–µ–∫ —ç–∫—Ä–∞–Ω–æ–≤ (–¥–ª—è ¬´–ù–∞–∑–∞–¥¬ª)

# ============ –£–¢–ò–õ–ò–¢–´ ============
def btn_url(text: str, url: str) -> InlineKeyboardButton:
    return InlineKeyboardButton(text=text, url=url)

def btn_cb(text: str, data: str) -> InlineKeyboardButton:
    return InlineKeyboardButton(text=text, callback_data=data)

def t_me(username: str) -> str:
    return f"https://t.me/{username.lstrip('@')}"

async def clear_msgs(chat_id: int):
    """–£–¥–∞–ª—è–µ—Ç –í–°–ï —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ (–æ–¥–∏–Ω –±–ª–æ–∫)."""
    ids = current_msgs.get(chat_id, [])
    for mid in ids:
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    current_msgs[chat_id] = []

async def send_block(chat_id: int, text: str, markup: Optional[InlineKeyboardMarkup] = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –µ–≥–æ, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —ç–∫—Ä–∞–Ω–∞."""
    await clear_msgs(chat_id)
    msg = await bot.send_message(chat_id, text, reply_markup=markup, disable_web_page_preview=True)
    current_msgs.setdefault(chat_id, []).append(msg.message_id)

def main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [btn_cb("–í–°–¢–£–ü–ò–¢–¨", "join")],
        [btn_cb("–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", "inside"), btn_url("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", t_me(SUPPORT_USERNAME))]
    ])

def join_kb() -> InlineKeyboardMarkup:
    row1 = [btn_cb("–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§", "pay_card")]
    if not CARD_PAY_URL:
        row1 = []  # —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏
    kb = []
    if row1:
        kb.append(row1)
    kb.append([btn_cb("–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π", "pay_crypto")])
    kb.append([btn_cb("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def inside_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [btn_cb("–í–°–¢–£–ü–ò–¢–¨", "join")],
        [btn_url("–ó–∞–¥–∞—Ç—å –¥–æ–ø.–≤–æ–ø—Ä–æ—Å—ã", t_me(SUPPORT_USERNAME)), btn_cb("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")]
    ])

def pay_card_kb() -> InlineKeyboardMarkup:
    rows = []
    if CARD_PAY_URL:
        rows.append([btn_url(f"–û–ø–ª–∞—Ç–∏—Ç—å {PRICE_RUB} ‚ÇΩ / {PERIOD_DAYS} –¥–Ω–µ–π", CARD_PAY_URL)])
    rows.append([btn_cb("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def pay_crypto_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [btn_url("–°–≤—è–∑–∞—Ç—å—Å—è", t_me(SUPPORT_USERNAME))],
        [btn_cb("–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§", "pay_card") if CARD_PAY_URL else btn_cb("‚Äî", "noop")],
        [btn_cb("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")]
    ])

def push_screen(chat_id: int, name: str):
    screen_stack.setdefault(chat_id, [])
    # –Ω–µ –¥–∞—ë–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ e-mail, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
    if name == "email" and chat_id in user_emails:
        name = "join"
    screen_stack[chat_id].append(name)

def pop_screen(chat_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞. –ü—É—Å—Ç–æ -> main. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç email, –µ—Å–ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω."""
    stack = screen_stack.setdefault(chat_id, [])
    if stack:
        stack.pop()
    while stack and stack[-1] == "email" and chat_id in user_emails:
        stack.pop()
    return stack[-1] if stack else "main"

async def show_screen(chat_id: int, name: str):
    """–†–æ—É—Ç–µ—Ä —ç–∫—Ä–∞–Ω–æ–≤."""
    renderers: Dict[str, Callable[[int], None]] = {
        "main": render_main,
        "join": render_join,
        "email": render_email,
        "inside": render_inside,
        "pay_card": render_pay_card,
        "pay_crypto": render_pay_crypto,
    }
    func = renderers.get(name, render_main)
    push_screen(chat_id, name)
    await func(chat_id)

# ============ –†–ï–ù–î–ï–†–´ ============
async def render_main(chat_id: int):
    text = (
        "<b>TubeComy</b>\n\n"
        "–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–ø—ã—Ç –∏ —Å—Ö–µ–º—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: <b>{PRICE_RUB} ‚ÇΩ</b> / <b>{PERIOD_DAYS} –¥–Ω–µ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
    )
    await send_block(chat_id, text, main_kb())

async def render_join(chat_id: int):
    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
        "‚Äî –ö–∞—Ä—Ç–æ–π –†–§ (–ÆKassa/—ç–∫–≤–∞–π—Ä–∏–Ω–≥)\n"
        "‚Äî –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (—á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É)\n\n"
        "–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."
    )
    await send_block(chat_id, text, join_kb())

async def render_email(chat_id: int):
    # –µ—Å–ª–∏ email —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –Ω–∞ –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã
    if chat_id in user_emails:
        await show_screen(chat_id, "join")
        return
    text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à e-mail (–æ–¥–∏–Ω —Ä–∞–∑) ‚Äî –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Å–≤—è–∑–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>name@example.com</code>\n\n"
        "–ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[btn_cb("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")]])
    await send_block(chat_id, text, kb)

async def render_inside(chat_id: int):
    await send_block(chat_id, WHAT_INSIDE_TEXT, inside_kb())

async def render_pay_card(chat_id: int):
    if not CARD_PAY_URL:
        await send_block(chat_id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", pay_card_kb())
        return
    text = f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§. –¢–∞—Ä–∏—Ñ: <b>{PRICE_RUB} ‚ÇΩ</b> / <b>{PERIOD_DAYS} –¥–Ω–µ–π</b>."
    await send_block(chat_id, text, pay_card_kb())

async def render_pay_crypto(chat_id: int):
    text = (
        "–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂–µ–º.\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π –†–§."
    )
    await send_block(chat_id, text, pay_crypto_kb())

# ============ –í–ê–õ–ò–î–ê–¶–ò–Ø EMAIL ============
EMAIL_RE = re.compile(r"^[^\s@]+@[^\s@]+\.[^\s@]+$")

# ============ –•–ï–ù–î–õ–ï–†–´ ============
@dp.message(CommandStart())
async def on_start(m: Message):
    screen_stack[m.from_user.id] = []
    current_msgs[m.from_user.id] = []
    await show_screen(m.chat.id, "main")

@dp.callback_query(F.data == "join")
async def cb_join(cb: CallbackQuery):
    # –µ—Å–ª–∏ e-mail —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã, –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ—Å–∏–º e-mail
    if cb.from_user.id in user_emails:
        await show_screen(cb.from_user.id, "join")
    else:
        await show_screen(cb.from_user.id, "email")
    await cb.answer()

@dp.callback_query(F.data == "inside")
async def cb_inside(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "inside")
    await cb.answer()

@dp.callback_query(F.data == "pay_card")
async def cb_pay_card(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "pay_card")
    await cb.answer()

@dp.callback_query(F.data == "pay_crypto")
async def cb_pay_crypto(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "pay_crypto")
    await cb.answer()

@dp.callback_query(F.data == "back")
async def cb_back(cb: CallbackQuery):
    prev_name = pop_screen(cb.from_user.id)
    await show_screen(cb.from_user.id, prev_name)
    await cb.answer()

# –ª–æ–≤–∏–º e-mail —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω —ç–∫—Ä–∞–Ω "email"
@dp.message()
async def on_text(m: Message):
    stack = screen_stack.get(m.from_user.id, [])
    if stack and stack[-1] == "email":
        email = (m.text or "").strip()
        if EMAIL_RE.match(email):
            user_emails[m.from_user.id] = email
            await m.answer("‚úÖ E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            # –Ω–µ –¥–µ—Ä–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ email ‚Äî —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã
            await show_screen(m.chat.id, "join")
        else:
            await m.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ e-mail. –ü—Ä–∏–º–µ—Ä: name@example.com")

# ============ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ============
@dp.error()
async def on_error(event, exception):
    try:
        upd_type = event.update.event_type
    except Exception:
        upd_type = "unknown"
    log.exception("Unhandled error (%s): %r", upd_type, exception)
    try:
        cb = event.update.callback_query
        if cb:
            await cb.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=False)
    except Exception:
        pass

# ============ FASTAPI ============
@app.get("/healthz")
async def healthz():
    return {"ok": True}

@app.post("/webhooks/telegram")
async def telegram_webhook(req: Request) -> Response:
    data = await req.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return Response(status_code=200)
