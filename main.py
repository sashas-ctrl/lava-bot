import os
import re
import sqlite3
import logging
from pathlib import Path
from typing import Dict, List, Callable, Awaitable

from fastapi import FastAPI, Request
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    Update, Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)

# ----------------------------- –õ–û–ì–ò ---------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("tubecomy-bot")

# ----------------------------- ENV ----------------------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")
INSIDE_CHANNEL = os.getenv("INSIDE_CHANNEL", "")        # @greycomunity
INSIDE_POST_ID = int(os.getenv("INSIDE_POST_ID", "0"))  # 5
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "sashablogerr")

TARIFF_PRICE = int(os.getenv("TARIFF_PRICE", "1499"))
TARIFF_DAYS = int(os.getenv("TARIFF_DAYS", "30"))
YOOKASSA_URL = os.getenv("YOOKASSA_URL", "https://pay.yookassa.ru/")
GRACE_HOURS = int(os.getenv("GRACE_HOURS", "24"))

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ----------------------------- –ë–î (email) ---------------------------
DATA_DIR = Path(__file__).parent
DB_PATH = DATA_DIR / "emails.db"
EMAIL_RE = re.compile(r"^[A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,}$")
_email_cache: Dict[int, str] = {}  # user_id -> email

def db_init():
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS emails (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            email TEXT NOT NULL,
            updated_at TEXT NOT NULL
        )
    """)
    con.commit()
    con.close()

def get_email(user_id: int) -> str | None:
    if user_id in _email_cache:
        return _email_cache[user_id]
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("SELECT email FROM emails WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    con.close()
    if row:
        _email_cache[user_id] = row[0]
        return row[0]
    return None

def save_email(user_id: int, username: str | None, email: str):
    _email_cache[user_id] = email
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("""
        INSERT INTO emails (user_id, username, email, updated_at)
        VALUES (?, ?, ?, datetime('now'))
        ON CONFLICT(user_id) DO UPDATE SET
          username=excluded.username,
          email=excluded.email,
          updated_at=datetime('now')
    """, (user_id, username or "", email))
    con.commit()
    con.close()

# ----------------------------- –ù–ê–í–ò–ì–ê–¶–ò–Ø –≠–ö–†–ê–ù–û–í --------------------
# –°—Ç–µ–∫ –∏–º—ë–Ω —ç–∫—Ä–∞–Ω–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ message_id —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ ‚Äî —á—Ç–æ–±—ã ¬´–ù–∞–∑–∞–¥¬ª —Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ –Ω–∞–¥–æ
screen_stack: Dict[int, List[str]] = {}          # user_id -> ["main", "join", ...]
current_msgs: Dict[int, List[int]] = {}          # user_id -> [msg_id, ...]

# –†–µ–Ω–¥–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏ —ç–∫—Ä–∞–Ω–∞ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ ‚Äî —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä)
Renderer = Callable[[int], Awaitable[List[int]]]
renderers: Dict[str, Renderer] = {}

async def clear_current(user_id: int):
    """–£–¥–∞–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –±–æ—Ç –ø—Ä–∏—Å–ª–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)."""
    for mid in current_msgs.get(user_id, []):
        try:
            await bot.delete_message(user_id, mid)
        except Exception:
            pass
    current_msgs[user_id] = []

async def show_screen(user_id: int, name: str):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω: —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π, —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—ã–π, –ø—É—à–∏–º –∏–º—è –≤ —Å—Ç–µ–∫."""
    await clear_current(user_id)
    if name not in renderers:
        raise RuntimeError(f"Unknown screen: {name}")
    msg_ids = await renderers[name](user_id)
    current_msgs[user_id] = msg_ids
    screen_stack.setdefault(user_id, []).append(name)

async def back_screen(user_id: int, fallback_name: str = "main"):
    """–ù–∞–∑–∞–¥: —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π, —É–±–∏—Ä–∞–µ–º –∏–º—è –∏–∑ —Å—Ç–µ–∫–∞ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π."""
    await clear_current(user_id)
    stack = screen_stack.setdefault(user_id, [])
    if stack:
        stack.pop()  # —É–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–º—è
    prev = stack[-1] if stack else fallback_name
    msg_ids = await renderers[prev](user_id)
    current_msgs[user_id] = msg_ids
    if not stack or stack[-1] != prev:
        stack.append(prev)

# ----------------------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---------------------------
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", callback_data="join")],
        [
            InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="inside"),
            InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url=f"https://t.me/{SUPPORT_USERNAME}")
        ],
    ])

def kb_join() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§", callback_data="pay_card")],
        [InlineKeyboardButton(text="ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

def kb_pay_card(email: str) -> InlineKeyboardMarkup:
    pay_url = f"{YOOKASSA_URL}?customer_email={email}"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", url=pay_url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_join")],
    ])

def kb_pay_crypto() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{SUPPORT_USERNAME}")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§", callback_data="pay_card")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_join")],
    ])

def kb_inside_footer() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", callback_data="join")],
        [
            InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –¥–æ–ø.–≤–æ–ø—Ä–æ—Å—ã", url=f"https://t.me/{SUPPORT_USERNAME}"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        ]
    ])

def kb_email_prompt() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

# ----------------------------- –¢–ï–ö–°–¢–´ -------------------------------
WELCOME_TEXT = (
    "<b>TubeComy</b>\n\n"
    "–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube "
    "–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö.\n\n"
    "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –º–∞—Å—Å—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É "
    "–≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ YouTube.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
)

JOIN_TEXT = (
    "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>\n\n"
    "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§ ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ÆKassa.\n"
    "ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π ‚Äî –µ—Å–ª–∏ —É–¥–æ–±–Ω–µ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –ø–æ–¥—Å–∫–∞–∂–µ–º —Ñ–æ—Ä–º–∞—Ç.\n"
)

PAY_CARD_TEXT = (
    "<b>–¢–∞—Ä–∏—Ñ—ã</b>\n\n"
    f"‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî {TARIFF_PRICE} ‚ÇΩ\n"
)

PAY_CRYPTO_TEXT = (
    "<b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥—Å–∫–∞–∂–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∏ –∞–¥—Ä–µ—Å.\n"
    "–õ–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∫–∞—Ä—Ç–æ–π –†–§.\n"
)

EMAIL_PROMPT_TEXT = (
    "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>e-mail</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.\n\n"
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ e-mail –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ñ–æ—Ä–º–∞—Ç: <code>name@example.com</code>)."
)

EMAIL_SAVED_TEXT = "‚úÖ –°–ø–∞—Å–∏–±–æ! E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."

# ----------------------------- –†–ï–ù–î–ï–† –≠–ö–†–ê–ù–û–í -----------------------
async def render_main(chat_id: int) -> List[int]:
    m = await bot.send_message(chat_id, WELCOME_TEXT, reply_markup=kb_main())
    return [m.message_id]

async def render_email(chat_id: int) -> List[int]:
    m = await bot.send_message(chat_id, EMAIL_PROMPT_TEXT, reply_markup=kb_email_prompt())
    return [m.message_id]

async def render_join(chat_id: int) -> List[int]:
    m = await bot.send_message(chat_id, JOIN_TEXT, reply_markup=kb_join())
    return [m.message_id]

async def render_pay_card(chat_id: int) -> List[int]:
    email = get_email(chat_id) or "unknown@example.com"
    m = await bot.send_message(chat_id, PAY_CARD_TEXT, reply_markup=kb_pay_card(email))
    return [m.message_id]

async def render_pay_crypto(chat_id: int) -> List[int]:
    m = await bot.send_message(chat_id, PAY_CRYPTO_TEXT, reply_markup=kb_pay_crypto())
    return [m.message_id]

async def render_inside(chat_id: int) -> List[int]:
    ids: List[int] = []
    # –∫–æ–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ (–±–æ—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—ë —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if INSIDE_CHANNEL and INSIDE_POST_ID > 0:
        try:
            res = await bot.copy_message(
                chat_id=chat_id,
                from_chat_id=INSIDE_CHANNEL,
                message_id=INSIDE_POST_ID
            )
            # aiogram v3: copy_message –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å message_id
            copy_id = getattr(res, "message_id", None)
            if copy_id:
                ids.append(copy_id)
        except Exception as e:
            log.warning(f"copy_message failed: {e}")
            fallback = (
                "<b>–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ TubeComy?</b>\n\n"
                "‚úîÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–æ—Å—Ç—É –∫–∞–Ω–∞–ª–æ–≤\n"
                "‚úîÔ∏è –†–∞–∑–±–æ—Ä—ã –∏ —à–∞–±–ª–æ–Ω—ã\n"
                "‚úîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞: {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π"
            )
            m1 = await bot.send_message(chat_id, fallback)
            ids.append(m1.message_id)
    footer = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=kb_inside_footer())
    ids.append(footer.message_id)
    return ids

# –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä—ã
renderers.update({
    "main": render_main,
    "email": render_email,
    "join": render_join,
    "pay_card": render_pay_card,
    "pay_crypto": render_pay_crypto,
    "inside": render_inside,
})

# ----------------------------- –•–ï–ù–î–õ–ï–†–´ -----------------------------
@dp.message(F.text == "/start")
async def cmd_start(m: Message):
    screen_stack[m.from_user.id] = []
    current_msgs[m.from_user.id] = []
    await show_screen(m.chat.id, "main")

@dp.callback_query(F.data == "join")
async def cb_join(cb: CallbackQuery):
    # –¢–ï–ü–ï–†–¨: –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–í–°–¢–£–ü–ò–¢–¨¬ª —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º e-mail.
    email = get_email(cb.from_user.id)
    if email:
        await show_screen(cb.from_user.id, "join")      # —É–∂–µ –∑–Ω–∞–µ–º e-mail ‚Üí —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    else:
        await show_screen(cb.from_user.id, "email")     # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∏–º e-mail (–æ–¥–∏–Ω —Ä–∞–∑)
    await cb.answer()

@dp.callback_query(F.data == "pay_card")
async def cb_pay_card(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "pay_card")
    await cb.answer()

@dp.callback_query(F.data == "pay_crypto")
async def cb_pay_crypto(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "pay_crypto")
    await cb.answer()

@dp.callback_query(F.data == "inside")
async def cb_inside(cb: CallbackQuery):
    await show_screen(cb.from_user.id, "inside")
    await cb.answer()

@dp.callback_query(F.data == "back")
async def cb_back(cb: CallbackQuery):
    await back_screen(cb.from_user.id, fallback_name="main")
    await cb.answer()

@dp.callback_query(F.data == "back_join")
async def cb_back_join(cb: CallbackQuery):
    # –∏–∑ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    await show_screen(cb.from_user.id, "join")
    await cb.answer()

# –ü—Ä–∏—Ö–æ–¥–∏—Ç e-mail —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ "email")
@dp.message(F.text.func(lambda t: bool(t) and EMAIL_RE.match(t.strip() or "")))
async def on_email_message(m: Message):
    # –ï—Å–ª–∏ e-mail —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –Ω–µ –ø—Ä–æ—Å–∏–º —Å–Ω–æ–≤–∞ (–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã)
    if get_email(m.from_user.id):
        await show_screen(m.from_user.id, "join")
        return

    email = m.text.strip()
    save_email(m.from_user.id, m.from_user.username, email)
    await m.answer("‚úÖ E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await show_screen(m.chat.id, "join")

@dp.message()
async def fallback(m: Message):
    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Üí –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_screen(m.chat.id, "main")

# ----------------------------- FASTAPI & WEBHOOK --------------------
app = FastAPI()

@app.post("/webhooks/telegram")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def health():
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    db_init()
    if PUBLIC_URL:
        url = f"{PUBLIC_URL}/webhooks/telegram"
        await bot.set_webhook(url)
        log.info(f"Webhook set to {url}")
    else:
        log.warning("PUBLIC_URL not set ‚Äî webhook won't be installed")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
