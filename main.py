import os
import re
import csv
import sqlite3
import asyncio
import logging
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv
from fastapi import FastAPI

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
)

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("tubecomy-bot")

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

PRICE_RUB = int(os.getenv("PRICE_RUB", "1499"))
PERIOD_DAYS = int(os.getenv("PERIOD_DAYS", "30"))
PAYMENT_URL = os.getenv("PAYMENT_URL", "https://tubecomy.com/pay")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "sashablogerr")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

DATA_DIR = Path(__file__).parent
DB_PATH = DATA_DIR / "contacts.db"

# ---------- –ë–î ----------
def db_init():
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS contacts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_user_id INTEGER NOT NULL,
            tg_username TEXT,
            email TEXT NOT NULL,
            created_at TEXT NOT NULL
        )
    """)
    cur.execute("CREATE INDEX IF NOT EXISTS idx_contacts_email ON contacts(email)")
    cur.execute("CREATE INDEX IF NOT EXISTS idx_contacts_user ON contacts(tg_user_id)")
    con.commit()
    con.close()

def save_email(tg_user_id: int, tg_username: str | None, email: str):
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute(
        "INSERT INTO contacts (tg_user_id, tg_username, email, created_at) VALUES (?, ?, ?, ?)",
        (tg_user_id, tg_username, email, datetime.utcnow().isoformat())
    )
    con.commit()
    con.close()

def export_csv(path: Path):
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("SELECT tg_user_id, tg_username, email, created_at FROM contacts ORDER BY id DESC")
    rows = cur.fetchall()
    con.close()

    with open(path, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["tg_user_id", "tg_username", "email", "created_at_utc"])
        writer.writerows(rows)

# ---------- –í–∞–ª–∏–¥–∞—Ü–∏—è email ----------
EMAIL_RE = re.compile(r"^[A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,}$")

def is_valid_email(s: str) -> bool:
    return bool(EMAIL_RE.match(s.strip()))

# ---------- –ë–æ—Ç ----------
bot = Bot(
    BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

class JoinFlow(StatesGroup):
    waiting_email = State()

def main_menu() -> InlineKeyboardMarkup:
    btn_join = InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {PRICE_RUB} ‚ÇΩ / {PERIOD_DAYS} –¥–Ω–µ–π", callback_data="join")
    btn_inside = InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="what_inside")
    btn_support = InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url=f"https://t.me/{SUPPORT_USERNAME}")
    return InlineKeyboardMarkup(inline_keyboard=[[btn_join],[btn_inside, btn_support]])

WELCOME_TEXT = (
    "<b>TubeComy</b>\n"
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ YouTube\n\n"
    "üîí –ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ: –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ä–∞–∑–±–æ—Ä—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã.\n"
    f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {PRICE_RUB} ‚ÇΩ / {PERIOD_DAYS} –¥–Ω–µ–π\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
)

@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(WELCOME_TEXT, reply_markup=main_menu())

@dp.callback_query(F.data == "what_inside")
async def on_inside(cb: CallbackQuery):
    try:
        if INSIDE_POST_ID <= 0:
            await cb.message.answer(
                "–ü–æ—Å—Ç –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_menu()
            )
            await cb.answer()
            return

        if INSIDE_CHANNEL:
            # –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª: –∫–æ–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç –ø–æ @username
            await bot.copy_message(
                chat_id=cb.message.chat.id,
                from_chat_id=INSIDE_CHANNEL,
                message_id=INSIDE_POST_ID
            )
        elif INSIDE_CHANNEL_ID:
            # –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É id (–Ω–∞ –±—É–¥—É—â–µ–µ)
            await bot.copy_message(
                chat_id=cb.message.chat.id,
                from_chat_id=int(INSIDE_CHANNEL_ID),
                message_id=INSIDE_POST_ID
            )
        else:
            await cb.message.answer(
                "–ù–µ –∑–∞–¥–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_menu()
            )
            await cb.answer()
            return

        # –≤–µ—Ä–Ω–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await cb.message.answer("–ï—â—ë –≤–æ–ø—Ä–æ—Å—ã? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëá", reply_markup=main_menu())

    except Exception as e:
        # –µ—Å–ª–∏ –ø–æ—Å—Ç —É–¥–∞–ª—ë–Ω/ID –Ω–µ–≤–µ—Ä–Ω—ã–π/–±–æ—Ç–∞ –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ ‚Äî –ø–æ–∫–∞–∂–µ–º –∑–∞–≥–ª—É—à–∫—É
        await cb.message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞). "
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –ø—Ä–∏—à–ª—ë–º –ø—Ä–∏–º–µ—Ä.",
            reply_markup=main_menu()
        )
    finally:
        await cb.answer()

@dp.callback_query(F.data == "join")
async def on_join(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>e-mail</b>.\n"
        "–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
    )
    await state.set_state(JoinFlow.waiting_email)
    await cb.answer()

@dp.message(JoinFlow.waiting_email)
async def on_email(m: Message, state: FSMContext):
    email = m.text.strip()
    if not is_valid_email(email):
        await m.answer("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ e-mail. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, e-mail –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>name@example.com</code>.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    save_email(m.from_user.id, m.from_user.username or "", email)
    await state.clear()
    log.info(f"Saved email for {m.from_user.id} (@{m.from_user.username}): {email}")

    # –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã (–º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å email –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä)
    pay_url = f"{PAYMENT_URL}?customer_email={email}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {PRICE_RUB} ‚ÇΩ", url=pay_url)]
    ])
    await m.answer(
        f"–°–ø–∞—Å–∏–±–æ! ‚úÖ\n\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: <b>{PRICE_RUB} ‚ÇΩ</b> / {PERIOD_DAYS} –¥–Ω–µ–π\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=kb
    )

@dp.message()
async def fallback(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=main_menu())

# --- –ê–¥–º–∏–Ω: –≤—ã–≥—Ä—É–∑–∫–∞ CSV
@dp.message(Command("export"))
async def cmd_export(m: Message):
    if m.from_user.id != ADMIN_ID or ADMIN_ID == 0:
        return
    tmp = DATA_DIR / "emails_export.csv"
    export_csv(tmp)
    await m.answer_document(FSInputFile(tmp), caption="–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (CSV).")
    try:
        tmp.unlink()
    except Exception:
        pass

# ---------- FastAPI –¥–ª—è Render ----------
app = FastAPI(title="TubeComy Bot")
_polling_task: asyncio.Task | None = None

@app.get("/healthz")
async def health():
    return {"status": "ok"}

@app.on_event("startup")
async def _startup():
    db_init()
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ (—á—Ç–æ–±—ã polling —Ä–∞–±–æ—Ç–∞–ª)
    await bot.delete_webhook(drop_pending_updates=True)

    async def _poll():
        await dp.start_polling(bot)

    global _polling_task
    _polling_task = asyncio.create_task(_poll())

@app.on_event("shutdown")
async def _shutdown():
    global _polling_task
    if _polling_task:
        _polling_task.cancel()
    await bot.session.close()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=int(os.getenv("PORT", "8000")))
