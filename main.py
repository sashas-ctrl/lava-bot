import os
import logging
from typing import Dict, List, Tuple

from fastapi import FastAPI, Request
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    Update, Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)

# ----------------------------- –õ–û–ì–ò ---------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("tubecomy-bot")

# ----------------------------- ENV ----------------------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://<render-domain>
CHANNEL_ID = os.getenv("CHANNEL_ID", "")  # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –Ω—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π id (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∑–¥–µ—Å—å)

# —ç–∫—Ä–∞–Ω ¬´–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?¬ª ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
INSIDE_CHANNEL = os.getenv("INSIDE_CHANNEL", "")      # –Ω–∞–ø—Ä–∏–º–µ—Ä: @greycomunity
INSIDE_POST_ID = int(os.getenv("INSIDE_POST_ID", "0"))  # –Ω–∞–ø—Ä–∏–º–µ—Ä: 5

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "sashablogerr")  # –±–µ–∑ @

# –¢–∞—Ä–∏—Ñ
TARIFF_PRICE = int(os.getenv("TARIFF_PRICE", "1499"))
TARIFF_DAYS = int(os.getenv("TARIFF_DAYS", "30"))

# –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§ ‚Äî –ø–æ–∫–∞ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ÆKassa (Short Link / Custom form / –º–∞–≥–∞–∑–∏–Ω)
YOOKASSA_URL = os.getenv("YOOKASSA_URL", "https://pay.yookassa.ru/")  # –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É!

# –ì—Ä–µ–π—Å-–ø–µ—Ä–∏–æ–¥ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ), –º–æ–∂–Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
GRACE_HOURS = int(os.getenv("GRACE_HOURS", "24"))

# ----------------------------- –ë–û–¢ ----------------------------------
bot = Bot(
    BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ----------------------------- –ù–ê–í–ò–ì–ê–¶–ò–Ø/–ò–°–¢–û–†–ò–Ø --------------------
# –•—Ä–∞–Ω–∏–º —Å—Ç–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ ¬´–ù–∞–∑–∞–¥¬ª
# user_id -> —Å–ø–∏—Å–æ–∫ message_id (–ø–æ—Å–ª–µ–¥–Ω–∏–π = —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω)
user_history: Dict[int, List[int]] = {}

def remember_message(user_id: int, message_id: int):
    stack = user_history.setdefault(user_id, [])
    stack.append(message_id)

async def delete_prev_if_any(user_id: int, keep_last: int = 0):
    """
    –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–ª—è—è `keep_last` –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏–∏.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    stack = user_history.get(user_id, [])
    while len(stack) > keep_last:
        mid = stack.pop()
        try:
            await bot.delete_message(user_id, mid)
        except Exception:
            pass

async def go_back(user_id: int):
    """
    ¬´–ù–∞–∑–∞–¥¬ª ‚Äî —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É.
    """
    stack = user_history.get(user_id, [])
    # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ
    if stack:
        try:
            await bot.delete_message(user_id, stack.pop())
        except Exception:
            pass
    # –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ ‚Äî –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —à–ª—ë–º


# ----------------------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---------------------------
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", callback_data="join")],
        [
            InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="inside"),
            InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url=f"https://t.me/{SUPPORT_USERNAME}")
        ],
    ])

def kb_join() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§", callback_data="pay_card")],
        [InlineKeyboardButton(text="ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
    ])

def kb_pay_card() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", url=YOOKASSA_URL)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_join")],
    ])

def kb_pay_crypto() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=f"https://t.me/{SUPPORT_USERNAME}")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –†–§", callback_data="pay_card")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_join")],
    ])

def kb_inside_footer() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", callback_data="join")],
        [
            InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –¥–æ–ø.–≤–æ–ø—Ä–æ—Å—ã", url=f"https://t.me/{SUPPORT_USERNAME}"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        ]
    ])

# ----------------------------- –¢–ï–ö–°–¢–´ -------------------------------
WELCOME_TEXT = (
    "<b>TubeComy</b>\n\n"
    "–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube "
    "–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö.\n\n"
    "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –º–∞—Å—Å—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É "
    "–≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ YouTube.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
)

JOIN_TEXT = (
    "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>\n\n"
    "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§ ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ÆKassa.\n"
    "ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π ‚Äî –µ—Å–ª–∏ —É–¥–æ–±–Ω–µ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –ø–æ–¥—Å–∫–∞–∂–µ–º —Ñ–æ—Ä–º–∞—Ç.\n"
)

PAY_CARD_TEXT = (
    "<b>–¢–∞—Ä–∏—Ñ—ã</b>\n\n"
    f"‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî {TARIFF_PRICE} ‚ÇΩ\n"
)

PAY_CRYPTO_TEXT = (
    "<b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥—Å–∫–∞–∂–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∏ –∞–¥—Ä–µ—Å.\n"
    "–õ–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∫–∞—Ä—Ç–æ–π –†–§.\n"
)


# ----------------------------- –•–ï–õ–ü–ï–†–´ –ü–û –≠–ö–†–ê–ù–ê–ú -------------------
async def send_screen_main(chat_id: int) -> None:
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
    await delete_prev_if_any(chat_id)
    msg = await bot.send_message(chat_id, WELCOME_TEXT, reply_markup=kb_main())
    remember_message(chat_id, msg.message_id)

async def send_screen_join(chat_id: int) -> None:
    await delete_prev_if_any(chat_id)
    msg = await bot.send_message(chat_id, JOIN_TEXT, reply_markup=kb_join())
    remember_message(chat_id, msg.message_id)

async def send_screen_pay_card(chat_id: int) -> None:
    await delete_prev_if_any(chat_id)
    msg = await bot.send_message(chat_id, PAY_CARD_TEXT, reply_markup=kb_pay_card())
    remember_message(chat_id, msg.message_id)

async def send_screen_pay_crypto(chat_id: int) -> None:
    await delete_prev_if_any(chat_id)
    msg = await bot.send_message(chat_id, PAY_CRYPTO_TEXT, reply_markup=kb_pay_crypto())
    remember_message(chat_id, msg.message_id)

async def send_inside(chat_id: int) -> None:
    """
    –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∏–∂–µ ‚Äî –Ω–∞—à–∏ –∫–Ω–æ–ø–∫–∏.
    """
    await delete_prev_if_any(chat_id)
    # –∫–æ–ø–∏—Ä—É–µ–º —Å–∞–º –ø–æ—Å—Ç
    if INSIDE_CHANNEL and INSIDE_POST_ID > 0:
        try:
            await bot.copy_message(
                chat_id=chat_id,
                from_chat_id=INSIDE_CHANNEL,
                message_id=INSIDE_POST_ID
            )
        except Exception as e:
            log.warning(f"copy_message failed: {e}")
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –¥–∞–¥–∏–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            fallback = (
                "<b>–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ TubeComy?</b>\n\n"
                "‚úîÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–æ—Å—Ç—É –∫–∞–Ω–∞–ª–æ–≤\n"
                "‚úîÔ∏è –†–∞–∑–±–æ—Ä—ã –∏ —à–∞–±–ª–æ–Ω—ã\n"
                "‚úîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞: {TARIFF_PRICE} ‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π"
            )
            m1 = await bot.send_message(chat_id, fallback)
            remember_message(chat_id, m1.message_id)
        else:
            # –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—Ç–∏–º ¬´–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π¬ª id –¥–ª—è —Å—Ç–µ–∫–∞
            # (—Å–∞–º –ø–æ—Å—Ç —É–¥–∞–ª–∏—Ç—å –Ω–µ —Å–º–æ–∂–µ–º, —Ç.–∫. –æ–Ω ¬´—á—É–∂–æ–π¬ª, –ø–æ—ç—Ç–æ–º—É —É–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏–º –Ω–∏–∂–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
            pass

    # –ø–æ–¥ –ø–æ—Å—Ç–æ–º —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    footer = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=kb_inside_footer())
    remember_message(chat_id, footer.message_id)

# ----------------------------- –•–ï–ù–î–õ–ï–†–´ -----------------------------
@dp.message(F.text == "/start")
async def cmd_start(m: Message):
    # —Å–±—Ä–æ—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é, –Ω–∞—á–Ω—ë–º —Å –Ω—É–ª—è
    user_history[m.from_user.id] = []
    await send_screen_main(m.chat.id)

@dp.callback_query(F.data == "join")
async def cb_join(cb: CallbackQuery):
    await send_screen_join(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "pay_card")
async def cb_pay_card(cb: CallbackQuery):
    await send_screen_pay_card(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "pay_crypto")
async def cb_pay_crypto(cb: CallbackQuery):
    await send_screen_pay_crypto(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "inside")
async def cb_inside(cb: CallbackQuery):
    await send_inside(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "back")
async def cb_back(cb: CallbackQuery):
    await go_back(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "back_join")
async def cb_back_join(cb: CallbackQuery):
    # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã
    await go_back(cb.from_user.id)
    await send_screen_join(cb.from_user.id)
    await cb.answer()

# ----------------------------- FASTAPI & WEBHOOK --------------------
app = FastAPI()

@app.post("/webhooks/telegram")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def health():
    return {"ok": True}

# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
async def on_startup():
    if PUBLIC_URL:
        url = f"{PUBLIC_URL}/webhooks/telegram"
        await bot.set_webhook(url)
        log.info(f"Webhook set to {url}")
    else:
        log.warning("PUBLIC_URL not set ‚Äî webhook won't be installed")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
