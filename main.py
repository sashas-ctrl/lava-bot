import os
import asyncio
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from fastapi import FastAPI

# ==== –∫–æ–Ω—Ñ–∏–≥ ====
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

PRICE_RUB = int(os.getenv("PRICE_RUB", "1499"))
PERIOD_DAYS = int(os.getenv("PERIOD_DAYS", "30"))
PAYMENT_URL = os.getenv("PAYMENT_URL", "https://tubecomy.com/pay")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "sashablogerr")

# ==== aiogram ====
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

def main_menu() -> InlineKeyboardMarkup:
    btn_join = InlineKeyboardButton(
        text=f"–í–°–¢–£–ü–ò–¢–¨ ‚Äî {PRICE_RUB} ‚ÇΩ / {PERIOD_DAYS} –¥–Ω–µ–π",
        url=PAYMENT_URL  # –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è YooKassa –ø–æ–¥—Å—Ç–∞–≤–∏—à—å —Å—Å—ã–ª–∫—É —á–µ–∫–∞—É—Ç–∞
    )
    btn_inside = InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="what_inside")
    btn_support = InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url=f"https://t.me/{SUPPORT_USERNAME}")
    return InlineKeyboardMarkup(inline_keyboard=[[btn_join],[btn_inside, btn_support]])

WELCOME_TEXT = (
    "<b>TubeComy</b>\n"
    "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ YouTube\n\n"
    "üîí <b>–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ</b>: –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ä–∞–∑–±–æ—Ä—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥—ã.\n"
    f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: <b>{PRICE_RUB} ‚ÇΩ</b> / {PERIOD_DAYS} –¥–Ω–µ–π\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
)

INSIDE_TEXT = (
    "<b>–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ TubeComy</b>\n\n"
    "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–æ—Å—Ç—É YouTube-–∫–∞–Ω–∞–ª–æ–≤\n"
    "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —É–ø–∞–∫–æ–≤–∫–∞ –∏ –ø—Ä–æ–¥–∞–∫—à–Ω\n"
    "‚Ä¢ –ò–¥–µ–∏ –∏ —Ä–∞–±–æ—á–∏–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏\n"
    "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
    f"–ü–æ–¥–ø–∏—Å–∫–∞: <b>{PRICE_RUB} ‚ÇΩ</b> / {PERIOD_DAYS} –¥–Ω–µ–π"
)

@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(WELCOME_TEXT, reply_markup=main_menu())

@dp.callback_query(F.data == "what_inside")
async def on_inside(cb):
    await cb.message.answer(INSIDE_TEXT, reply_markup=main_menu())
    await cb.answer()

@dp.message()
async def fallback(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=main_menu())

# ==== FastAPI –¥–ª—è Render ====
app = FastAPI(title="TubeComy Bot")

@app.get("/healthz")
async def health():
    return {"status": "ok"}

_polling_task: asyncio.Task | None = None

@app.on_event("startup")
async def _on_startup():
    global _polling_task
    # –∑–∞–ø—É—Å–∫–∞–µ–º long-polling –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É
    async def _poll():
        await dp.start_polling(bot)
    _polling_task = asyncio.create_task(_poll())

@app.on_event("shutdown")
async def _on_shutdown():
    global _polling_task
    if _polling_task:
        _polling_task.cancel()
    await bot.session.close()

# –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: uvicorn main:app --reload
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=int(os.getenv("PORT", "8000")))
