import os
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, Update, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "0"))
PUBLIC_URL = os.getenv("PUBLIC_URL", "http://127.0.0.1:8000")

assert BOT_TOKEN, "–ù–µ—Ç BOT_TOKEN –≤ .env"
assert CHANNEL_ID != 0, "–ù–µ—Ç CHANNEL_ID –≤ .env"

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ---------- UI ----------
from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

TARIFF_PRICE = int(os.getenv("TARIFF_PRICE", "1499"))
TARIFF_DAYS  = int(os.getenv("TARIFF_DAYS", "30"))
WHAT_INSIDE_URL = os.getenv("WHAT_INSIDE_URL", "")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "")

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç üëã\n\n"
    "–≠—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª."
)

def main_menu() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–í–°–¢–£–ü–ò–¢–¨", callback_data="menu:join")],
    ]
    # –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏? ‚Äî —ç—Ç–æ —Å—Ä–∞–∑—É —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π –ø–æ—Å—Ç
    if WHAT_INSIDE_URL:
        buttons.append([InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", url=WHAT_INSIDE_URL)])
    else:
        buttons.append([InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="menu:inside")])
    # –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —Å—Ä–∞–∑—É –¥–∏–∞–ª–æ–≥ –≤ Telegram
    if SUPPORT_USERNAME:
        buttons.append([InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url=f"https://t.me/{SUPPORT_USERNAME}")])
    else:
        buttons.append([InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="menu:support")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def tariffs_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{TARIFF_PRICE}‚ÇΩ / {TARIFF_DAYS} –¥–Ω–µ–π", callback_data=f"plan:{TARIFF_PRICE}:{TARIFF_DAYS}")],
        [InlineKeyboardButton(text="‚óÄÔ∏é –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ])

@dp.message(Command("start"))
async def on_start(m: Message):
    await m.answer(WELCOME_TEXT, reply_markup=main_menu())

@dp.callback_query(F.data == "menu:join")
async def menu_join(cq):
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ üëá", reply_markup=tariffs_kb())
    await cq.answer()

@dp.callback_query(F.data.startswith("plan:"))
async def pick_plan(cq):
    # plan:<price>:<days>
    _, price, days = cq.data.split(":")
    # –ï—Å–ª–∏ –õ–∞–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –∏ –¥–∞—ë–º —Å—Å—ã–ª–∫—É
    if os.getenv("LAVA_API_BASE") and os.getenv("LAVA_API_KEY"):
        try:
            pay_url = await create_lava_invoice(
                tg_id=cq.from_user.id
            )
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ ({price}‚ÇΩ / {days} –¥–Ω–µ–π)", url=pay_url)],
                [InlineKeyboardButton(text="‚óÄÔ∏é –ù–∞–∑–∞–¥", callback_data="menu:join")]
            ])
            await cq.message.edit_text("–ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã üëá", reply_markup=kb)
        except Exception:
            await cq.message.edit_text(
                "–°–µ–π—á–∞—Å –æ–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏é –ù–∞–∑–∞–¥", callback_data="menu:join")]
                ])
            )
    else:
        await cq.message.edit_text(
            "–û–ø–ª–∞—Ç–∞ –≤–∫–ª—é—á–∏—Ç—Å—è –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ üôè",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏é –ù–∞–∑–∞–¥", callback_data="menu:join")]
            ])
        )
    await cq.answer()

@dp.callback_query(F.data == "menu:inside")
async def menu_inside(cq):
    await cq.message.edit_text(
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –î–æ–±–∞–≤—å WHAT_INSIDE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏é –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
    )
    await cq.answer()

@dp.callback_query(F.data == "menu:support")
async def menu_support(cq):
    await cq.message.edit_text(
        "–£–∫–∞–∂–∏ SUPPORT_USERNAME –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–∞ –ª–∏—á–Ω—ã–π —á–∞—Ç.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏é –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
    )
    await cq.answer()

@dp.callback_query(F.data == "menu:back")
async def menu_back(cq):
    await cq.message.edit_text(WELCOME_TEXT, reply_markup=main_menu())
    await cq.answer()
# ---------- /UI ----------

@app.post("/webhooks/telegram")
async def telegram_webhook(request: Request):
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
